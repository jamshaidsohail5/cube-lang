use cube.lang.formatting.format
use cube.lang.parser.cubeParser
use cube.repository

define verify
  function main(args as array[string])
    System.out.println('Verifying...')
    var r1 = new localRepository(repoPath, 'cube')
    var r2 = new localRepository(repoPath, 'tree')
    var n = 0, f = 0

    for each path in r1.sources
      if not verify(r1, r2, path, false) then do
        var length as int = r1.read(path).length

        if minLength = 0 or length < minLength then do
          minLength = length
          minArgPath = path
        end

        f++
      end

      n++
    end

    System.out.println('Passed ' + (n - f) + '/' + n + ' parser tests.')
    System.out.println('Failed: ' + f)
    if f > 0 then verify(r1, r2, minArgPath, true)
  end

  internal
    shared
      var repoPath as string = '../cube-parser/test/data'
      var minLength as int
      var minArgPath as string

      function verify(
        r1 as localRepository, r2 as localRepository, path as string, verbose as boolean)
        var cube as string = r1.read(path)
        var expected as string = r2.read(path)

        if verbose then do
          System.out.println
          System.out.println(path)
          System.out.println(cube)
          System.out.println
          System.out.println('expected:')
          System.out.println(expected)
          System.out.println
          System.out.println('actual:')
        end

        try
          var actual as string = format(dependencyTree(cube))

          if not actual.equals(expected) then do
            if verbose then System.out.println(actual)
            output false
          end
        catch
          when e as exception then do
            if verbose then e.printStackTrace(System.out)
            output false
          end
        end

        output true
      end
    end
  end
end