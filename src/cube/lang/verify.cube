use cube.lang.formatting.format
use cube.lang.parser.cubeParser
use cube.repository

define verify
  function main(args as array[string])
    System.out.println('Verifying...')
    var r1 = new localRepository(repoPath, 'cube')
    var r2 = new localRepository(repoPath, 'tree')
    compare(r1, r2)
    System.out.println('Passed ' + passed + '/' + total + ' parser tests.')
    System.out.println('Failed: ' + (total - passed))
  end

  internal
    shared
      var repoPath as string = '../cube-parser/test/data'
      var passed = 0
      var total = 0

      function compare(r1 as localRepository, r2 as localRepository) =
        for each path in r1.sources
          var cube as string = r1.read(path)
          var expected as string = r2.read(path)

          try
            var actual as string = format(dependencyTree(cube))

            if actual.equals(expected) then passed++
            else do
              System.out.println(path)
              System.out.println('Failed   : ' + cube)
              System.out.println('Expected : ' + expected)
              System.out.println('Actual   : ' + actual)
            end
          catch
            when e as exception then do
              System.out.println(path)
              System.out.println('Failed   : ' + cube)
              e.printStackTrace(System.out)
            end
          end

          total++
        end
    end
  end
end