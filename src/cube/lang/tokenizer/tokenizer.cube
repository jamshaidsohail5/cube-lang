use cube.lang
use cube.lang.syntax
use cube.lang.tokenizer.characterType
use cube.lang.tokenizer.symbol

define tokenizer
  function create(text as string) = me.text = text
  function tokenType as nodeType = tokenType
  function tokenText as string = tokenText
  function symbol as symbol = symbol
  function keyword as keyword = keyword

  function next as boolean
    var c as int

    while c <- peek != -1
      if c = char("'") or c = char('"') then output readQuotedString(c)

      match characterType(c)
        when Whitespace then position++
        when Symbol then output readSymbol
        when Digit then output readNumber
        when Character then output identifierOrKeyword
        else error new unsupportedOperationException
      end
    end

    output false
  end

  internal
    var text as string
    var position as int
    var tokenType as nodeType
    var tokenText as string
    var symbol as symbol
    var keyword as keyword

    function readNumber
      var start as int = position++
      var c as int
      while c <- peek != -1 and characterType(c) = Digit -> position++
      tokenText = text.substring(start, position)
      tokenType = NodeType.Number
      output true
    end

    function identifierOrKeyword
      var start as int = position++
      var c as int, t as int
      while c <- peek != -1 and (t <- characterType(c) = Character or t = Digit) -> position++
      tokenText = text.substring(start, position)
      keyword = Keyword.keyword(tokenText)

      tokenType
        = if keyword is not null then keyword.nodeType else NodeType.Identifier

      output true
    end

    function readQuotedString(q as int)
      var start as int = position++
      var c as int
      while c <- peek != -1 and c != q -> position++
      tokenText = text.substring(start, ++position)
      tokenType = NodeType.QuotedString
      output true
    end

    function readSymbol
      var c as int = read

      match c
        when char('.') then reduce(Dot)
        when char('(') then reduce(LeftParenthesis)
        when char(')') then reduce(RightParenthesis)
        when char('{') then reduce(LeftCurlyBracket)
        when char('}') then reduce(RightCurlyBracket)
        when char('[') then reduce(LeftSquareBracket)
        when char(']') then reduce(RightSquareBracket)
        when char(',') then reduce(Comma)

        when char('=') then
          if peek = char('=') then do
            read
            reduce(EqualEqual)
          end else reduce(Equal)

        when char('+') then
          match peek
            when char('+') then do
              read
              reduce(PlusPlus)
            end

            when char('=') then do
              read
              reduce(PlusEqual)
            end

            else reduce(Plus)
          end

        when char('!') then
          if peek = char('=') then do
            read
            reduce(ExclamationEqual)
          end else reduce(Exclamation)

        when char('%') then
          if peek = char('%') then do
            read
            reduce(PercentEqual)
          end else reduce(Percent)

        when char('-') then
          match peek
            when char('-') then do
              read
              reduce(MinusMinus)
            end

            when char('=') then do
              read
              reduce(MinusEqual)
            end

            else reduce(Minus)
          end

        when char('*') then reduce(Asterisk)
        when char('/') then reduce(ForwardSlash)
        when char('^') then reduce(Caret)
        when char('~') then reduce(Tilde)

        when char('<') then
          match peek
            when char('-') then do
              read
              reduce(LeftArrowSymbol)
            end

            when char('=') then do
              read
              reduce(LessEqual)
            end

            else reduce(LessSymbol)
          end

        when char('>') then
          if peek = char('=') then do
            read
            reduce(GreaterEqual)
          end else reduce(GreaterSymbol)

        else error new unsupportedOperationException(
          "Unrecognized character '" + c as char + "' unicode " + c + '.')
      end

      output true
    end

    function reduce(symbol as symbol)
      me.tokenType = NodeType.Symbol
      me.tokenText = symbol.text
      me.symbol = symbol
    end

    function peek as int = if position < text.length then text.charAt(position) else -1
    function read as int = text.charAt(position++)
  end
end