use cube.lang.keyword
use cube.lang.cst.cstNodeType
use cube.lang.cst.symbol
use cube.lang.cst.cstNodeType.IDENTIFIER
use cube.lang.cst.cstNodeType.SYMBOL
use cube.lang.cst.symbol
use cube.lang.tokenizer.characterType

define tokenizer
  function create(text as string) = me.text = text
  function tokenType as cstNodeType = tokenType
  function tokenText as string = tokenText
  function symbol as symbol = symbol
  function keyword as keyword = keyword

  function next as boolean
    tokenType = null
    tokenText = null
    symbol = null
    var c as int

    while c <- peek != -1 ->
      match characterType(c)
        when WHITESPACE then position++
        when SYMBOL_CHARACTER then output readSymbol
        when DIGIT then error new unsupportedOperationException
        when CHARACTER then output identifierOrKeyword
        else error new unsupportedOperationException
      end

    output false
  end

  internal
    var text as string
    var position as int
    var tokenType as cstNodeType
    var tokenText as string
    var symbol as symbol
    var keyword as keyword

    function identifierOrKeyword
      var start as int = position++
      var c as int
      while c <- peek != -1 and characterType(c) = CHARACTER -> position++
      tokenText = text.substring(start, position)
      keyword = Keyword.keyword(tokenText)

      tokenType
        = if keyword is not null then keyword.nodeType else IDENTIFIER

      output true
    end

    function readSymbol
      match read
        when char('(') then reduce(LEFT_PARENTHESIS)
        when char(')') then reduce(RIGHT_PARENTHESIS)
        when char(',') then reduce(COMMA)
        when char('=') then reduce(EQUAL)
        when char('+') then reduce(PLUS)
        when char('-') then reduce(MINUS)
        when char('*') then reduce(ASTERISK)
        when char('/') then reduce(FORWARD_SLASH)
        when char('^') then reduce(CARET)
        when char('~') then reduce(TILDE)
        when char('!') then reduce(EXCLAMATION_MARK)
        when char('?') then reduce(QUESTION_MARK)
        when char(':') then reduce(COLON)
        else error new unsupportedOperationException
      end

      output true
    end

    function reduce(symbol as symbol)
      me.tokenType = SYMBOL
      me.tokenText = symbol.text
      me.symbol = symbol
    end

    function peek as int = if position < text.length then text.charAt(position) else -1
    function read as int = text.charAt(position++)
  end
end