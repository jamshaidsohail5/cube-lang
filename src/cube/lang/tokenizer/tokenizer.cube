use cube.lang.cst.cstNodeType
use java.util.hashMap
use java.util.map
use cube.lang.cst.cstNodeType.IDENTIFIER

define tokenizer
  function create(text as string)
    charStream = text

    for each tokenType in CstNodeType.values
      var tokenText as string = tokenType.text
      if tokenText is not null then symbols.put(tokenText.charAt(0), tokenType)
    end
  end

  function tokenType as cstNodeType = tokenType
  function tokenText as string = tokenText

  function next
    tokenType = null
    tokenText = null

    while index < charStream.length
      var c as char = charStream.charAt(index++)

      if symbols.containsKey(c) then do
        tokenType = symbols.get(c)
        tokenText = Character.toString(c)
        return
      end

      if Character.isLetter(c) then do
        var start as int = index - 1

        while index < charStream.length
          if not Character.isLetter(charStream.charAt(index)) then break loop1
          index++
        end

        var name as string = charStream.substring(start, index)
        tokenType = IDENTIFIER
        tokenText = name
        return
      end
    end
  end

  internal
    let symbols = new map[character, cstNodeType]
    var charStream as string
    var index as int
    var tokenType as cstNodeType
    var tokenText as string
  end
end