use cube.lang
use cube.lang.syntax
use cube.lang.tokenizer.characterType
use cube.lang.tokenizer.symbol
use cube.text

define tokenizer
  function create(text as string)
    me.text = text
    me.length = text.length
  end

  function tokenPosition = new textPosition(tokenLine, tokenColumn)
  function tokenType as nodeType = tokenType
  function tokenText as string = tokenText
  function symbol as symbol = symbol
  function keyword as keyword = keyword

  function next as boolean
    var c as int

    while c <- peek != -1 ->
      match characterType(c)
        when Whitespace then skip

        when Symbol then do
          if c = char("'") or c = char('"') then output readQuotedString(c)
          output readLeadingSymbol
        end

        when Digit then output readNumber
        when Character then output identifierOrKeyword
        else error new unsupportedOperationException
      end

    output false
  end

  internal
    var text as string
    var offset as int
    var length as int
    var line = 1
    var column = 1
    var tokenLine as int
    var tokenColumn as int
    var tokenType as nodeType
    var tokenText as string
    var symbol as symbol
    var keyword as keyword

    function readNumber
      startToken
      var c as int
      var start as int = read
      c = readDigits

      if c = char('x') or c = char('X') then do
        skip
        readHexDigits
        tokenText = text.substring(start, offset)
        tokenType = NodeType.Hex
        output true
      end

      if c = char('.') then do
        skip
        c = readDigits
      end

      if c = char('e') or c = char('E') then do
        skip
        c = peek
        if c = char('+') or c = char('-') then skip
        c = readDigits

        if c = char('.') then do
          skip
          readDigits
        end
      end

      tokenText = text.substring(start, offset)
      tokenType = NodeType.Number
      output true
    end

    function identifierOrKeyword
      startToken
      var start as int = read
      var c as int, t as int
      while c <- peek != -1 and (t <- characterType(c) = Character or t = Digit) -> skip
      tokenText = text.substring(start, offset)
      keyword = Keyword.keyword(tokenText)

      tokenType
        = if keyword is not null then keyword.nodeType else NodeType.Identifier

      output true
    end

    function readQuotedString(q as int)
      var start as int = read
      var c as int
      while c <- peek != -1 and c != q -> skip
      skip
      tokenText = text.substring(start, offset)
      tokenType = NodeType.QuotedString
      output true
    end

    function readLeadingSymbol
      startToken
      var c1 as int = peek
      var c2 as int = peek(1)

      match c1
        when char('.') then if characterType(c2) = Digit then readNumber else reduce(Dot)
        when char('(') then reduce(LeftParenthesis)
        when char(')') then reduce(RightParenthesis)
        when char('{') then reduce(LeftCurlyBracket)
        when char('}') then reduce(RightCurlyBracket)
        when char('[') then reduce(LeftSquareBracket)
        when char(']') then reduce(RightSquareBracket)
        when char(',') then reduce(Comma)
        when char('=') then if c2 = char('=') then reduce2(EqualEqual) else reduce(Equal)

        when char('+') then
          match c2
            when char('+') then reduce2(PlusPlus)
            when char('=') then reduce2(PlusEqual)
            else if c2 = char('.') or characterType(c2) = Digit then readNumber else reduce(Plus)
          end

        when char('-') then
          match c2
            when char('-') then reduce2(MinusMinus)
            when char('=') then reduce2(MinusEqual)
            else if c2 = char('.') or characterType(c2) = Digit then readNumber else reduce(Minus)
          end

        when char('*') then reduce(Asterisk)
        when char('/') then reduce(ForwardSlash)
        when char('^') then reduce(Caret)
        when char('~') then reduce(Tilde)

        when char('<') then
          match c2
            when char('-') then reduce2(LeftArrowSymbol)
            when char('=') then reduce2(LessEqual)
            else reduce(LessSymbol)
          end

        when char('>') then
          if c2 = char('=') then reduce2(GreaterEqual) else reduce(GreaterSymbol)

        when char('!') then
          if c2 = char('=') then reduce2(ExclamationEqual) else reduce(Exclamation)

        when char('%') then if c2 = char('%') then reduce2(PercentEqual) else reduce(Percent)
        else error new unsupportedOperationException(
          "Unrecognized character '" + c1 as char + "' unicode " + c1 + '.')
      end

      output true
    end

    function readDigits as int
      var c as int
      while digit(c <- peek) -> skip
      output c
    end

    function readHexDigits as int
      var c as int
      while hexDigit(c <- peek) -> skip
      output c
    end

    function startToken
      me.tokenLine = line
      me.tokenColumn = column
    end

    function reduce(symbol as symbol)
      skip
      me.tokenType = NodeType.Symbol
      me.tokenText = symbol.text
      me.symbol = symbol
    end

    function reduce2(symbol as symbol)
      skip2
      me.tokenType = NodeType.Symbol
      me.tokenText = symbol.text
      me.symbol = symbol
    end

    function peek as int = if offset < length then text.charAt(offset) else -1

    function peek(n as int) as int
      var o as int = offset + n
      output if o < length then text.charAt(o) else -1
    end

    function skip as void =
      if text.charAt(offset++) = char('\n') then do
        line++
        column = 1
      end else column++

    function skip2 =
      for i = 0 to i < 2 ->
        if text.charAt(offset++) = char('\n') then do
          line++
          column = 1
        end else column++

    function read as int
      var o as int = offset

      if text.charAt(offset++) = char('\n') then do
        line++
        column = 1
      end else column++

      output o
    end
  end
end