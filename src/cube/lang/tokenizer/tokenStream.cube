use cube.lang.cst.cstNodeType
use cube.lang.cst.token
use java.util.arrayList
use java.util.list

define tokenStream
  function create(tokenizer as tokenizer) = me.tokenizer = tokenizer

  function next as token
    fill(0)
    output buffer.remove(0)
  end

  function expect(expected as cstNodeType) as token
    var token as token = peek(0)

    if token.nodeType != expected then
      error 'Expected ' + expected + ' not ' + token.nodeType + '.'

    output next
  end

  function read(expected as cstNodeType)
    var token as token = peek(0)
    if token.nodeType != expected then output false
    next
    output true
  end

  function peek(n as int) as token
    fill(n)
    output buffer.get(n)
  end

  shared
    function tokenStream(text as string) = new tokenStream(new tokenizer(text))
  end

  internal
    let buffer = new list[token]
    var tokenizer as tokenizer

    function fill(n as int) =
      while buffer.size <= n ->
        buffer.add(
          if tokenizer.next then new token(tokenizer.tokenType, tokenizer.tokenText) else null)
  end
end