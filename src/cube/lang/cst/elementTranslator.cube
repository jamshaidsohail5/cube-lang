use cube.lang
use cube.lang.elements
use cube.lang.operator

define elementTranslator as cstTranslator[element]
  function enter(nodeType as nodeType) as elementTranslator
    var v = new elementTranslator
    v.nodeType = nodeType
    output v
  end

  function start(nodeType as nodeType, operator as operator)
    me.nodeType = nodeType
    me.operator = operator
    elements.clear
  end

  function child(token as token) = nothing
  function child(element as element) as void = elements.add(element)

  function value as element
    match nodeType
      when Assign then do
        var name as string = (elements.get(0) as identifier).name
        output new assign(AssignEqual, name, elements.get(1))
      end

      when UnaryExpression then output new unaryExpression(operator, elements.get(0))

      when BinaryExpression then
        output new binaryExpression(operator, elements.get(0), elements.get(1))

      when DotExpression then output new dotExpression(elements.get(0), elements.get(1))

      when FunctionExpression then
        output new functionExpression(elements.get(0), elements.get(1) as argumentList)

      when Arguments then output new argumentList(elements)

      when IfExpression then
        output new ifExpression(elements.get(0), elements.get(1), elements.get(2))
    end

    error new unsupportedOperationException(nodeType.toString)
  end

  function value(token as token) as element
    match token.nodeType
      when Identifier then output new identifier(token.text)
      when Number then output new constant(Integer.parseInt(token.text))
      when ConstantKeyword then output new constant(Boolean.parseBoolean(token.text))
    end

    error new unsupportedOperationException(token.nodeType.toString)
  end

  internal
    var nodeType as nodeType
    var operator as operator
    let elements = new list[element]
  end
end