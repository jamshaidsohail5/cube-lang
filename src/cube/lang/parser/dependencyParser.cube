use cube.lang.syntax
use cube.lang.tokenizer

define dependencyParser[T]
  function create(
    definition as parserDefinition[T], visitor as dependencyVisitor[T], tokens as tokenStream)
    me.leftParsers = definition.left
    me.rightParsers = definition.right
    me.visitor = visitor
    me.tokens = tokens
  end

  function visitor as dependencyVisitor[T] = visitor
  function tokens as tokenStream = tokens
  function parse as T = parse(0)

  function parse(rightPrecedence as int) as T
    var t0 as token = tokens.next
    var value as T = leftParsers.find(t0).parse(me, t0)

    while rightPrecedence < leftPrecedence
      t0 = tokens.next
      value = rightParsers.find(t0).parse(me, value, t0)
    end

    output value
  end

  internal
    var leftParsers as parserMap[leftDependencyParser[T]]
    var rightParsers as parserMap[rightDependencyParser[T]]
    var visitor as dependencyVisitor[T]
    var tokens as tokenStream

    function leftPrecedence as int
      var q0 as token = tokens.peek(0)
      if q0 is null then output 0
      var parser as rightDependencyParser[T] = rightParsers.get(q0)
      output if parser is not null then parser.precedence else 0
    end
  end
end