use cube.lang.parser
use cube.lang.precedence
use cube.lang.syntax
use cube.lang.tokenizer
use cube.lang.tokenizer.symbol

define functionExpressionParser[T] as rightDependencyParser[T]
  function precedence as int = FunctionPrecedence.value

  function parse(parser as dependencyParser[T], left as T, t0 as token) as T
    var arguments as T = parseArguments(parser, t0)
    var v as dependencyVisitor[T] = parser.visitor
    v.visit(NodeType.FunctionExpression)
    v.visitDependency(left)
    v.visitDependency(arguments)
    output v.value
  end

  internal
    function parseArguments(parser as dependencyParser[T], t0 as token) as T
      var tokens as tokenStream = parser.tokens
      var v as dependencyVisitor[T] = parser.visitor.enter(NodeType.Arguments)
      v.visitLeaf(t0)
      var t as token = tokens.read(RightParenthesis)

      if t is not null then v.visitLeaf(t)
      else do
        do
          v.visitDependency(parser.parse)
          t = tokens.read(Comma)
          if t is not null then v.visitLeaf(t)
        until t is null

        v.visitLeaf(tokens.expect(RightParenthesis))
      end

      output v.value
    end
  end
end