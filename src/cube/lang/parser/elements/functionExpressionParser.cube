use cube.lang.cst
use cube.lang.parser
use cube.lang.precedence
use cube.lang.tokenizer
use cube.lang.tokenizer.symbol

define functionExpressionParser[T] as rightParser[T]
  function precedence as int = FunctionPrecedence.value

  function parse(parser as parser[T], left as T, t0 as token) as T
    var arguments as T = parseArguments(parser)
    var v as cstTranslator[T] = parser.translator
    v.start(NodeType.FunctionExpression)
    v.child(left)
    v.child(t0)
    v.child(arguments)
    output v.value
  end

  internal
    function parseArguments(parser as parser[T]) as T
      var tokens as tokenStream = parser.tokens
      var v as cstTranslator[T] = parser.translator.enter(NodeType.ArgumentList)
      var t as token = tokens.read(RightParenthesis)

      if t is not null then v.child(t)
      else do
        do
          v.child(parser.parse)
          t = tokens.read(Comma)
          if t is not null then v.child(t)
        until t is null

        v.child(tokens.expect(RightParenthesis))
      end

      output v.value
    end
  end
end