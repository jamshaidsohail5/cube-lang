use cube.lang
use cube.lang.parser.elements
use cube.lang.syntax
use cube.lang.tokenizer.symbol
use cube.lang.tokenizer.tokenStream

define cubeParser
  shared
    function parse(text as string) as element = parse(text, new elementBuilder)

    function dependencyTree(text as string) as dependencyNode =
      parse(text, new dependencyTreeBuilder)

    do
      map.leaf(NodeType.Identifier)
      map.leaf(NodeType.Number)
      map.leaf(NodeType.ConstantKeyword)
      map.operators(Operator.values)
      map.rightDependency(Dot, new dotExpressionParser)
      map.rightDependency(Equal, new assignParser)
      map.leftDependency(LeftParenthesis, new bracketedTermParser)
      map.rightDependency(LeftParenthesis, new functionExpressionParser)
      map.leftDependency(Keyword.`If`, new ifExpressionParser)
    end
  end

  internal
    shared
      let map = new parserDefinition[_]

      function parse[T](text as string, translator as dependencyVisitor[T]) as T =
        new dependencyParser(map as parserDefinition[T], translator, tokenStream(text))
          .parse
    end
  end
end