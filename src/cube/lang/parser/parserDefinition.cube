use cube.lang
use cube.lang.parser.elements
use cube.lang.syntax

define parserDefinition[T]
  function left as parserMap[leftDependencyParser[T]] = left
  function right as parserMap[rightDependencyParser[T]] = right

  function leftDependency(key as object, parser as leftDependencyParser[T]) as void =
    left.add(key, parser)

  function rightDependency(key as object, parser as rightDependencyParser[T]) as void =
    right.add(key, parser)

  function leaf(nodeType as nodeType) as void = left.add(nodeType, new tokenParser)

  function operators(operators as array[operator]) =
    for each operator in operators -> operator(operator)

  internal
    let left = new parserMap[leftDependencyParser[T]]
    let right = new parserMap[rightDependencyParser[T]]

    function operator(operator as operator)
      var key as object = operator.symbol
      if key is null then key = operator.keyword

      match operator.operatorType
        when UnaryPrefix then leftDependency(key, new unaryPrefixParser(operator))
        when UnaryPostfix then rightDependency(key, new unaryPostfixParser(operator))
        else rightDependency(key, new binaryExpressionParser(operator))
      end
    end
  end
end