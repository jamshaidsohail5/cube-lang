use cube.lang
use cube.lang.tokenizer

enum operator
  LogicalAnd(AND_KEYWORD, LeftAssociative, LogicalAndPrecedence)
  LogicalOr(OR_KEYWORD, LeftAssociative, LogicalOrPrecedence)
  BinaryAnd(AND_KEYWORD, LeftAssociative, BinaryAndPrecedence)
  BinaryOr(OR_KEYWORD, LeftAssociative, BinaryOrPrecedence)
  BinaryXor(CARET, LeftAssociative, BinaryXorPrecedence)
  IncrementPostfix(PLUS_PLUS, UnaryPostfix, UnaryPostfixPrecedence)
  DecrementPostfix(MINUS_MINUS, UnaryPostfix, UnaryPostfixPrecedence)
  Positive(PLUS, UnaryPrefix, UnaryPrefixPrecedence)
  Negative(MINUS, UnaryPrefix, UnaryPrefixPrecedence)
  IncrementPrefix(PLUS_PLUS, UnaryPrefix, UnaryPrefixPrecedence)
  DecrementPrefix(MINUS_MINUS, UnaryPrefix, UnaryPrefixPrecedence)
  BinaryNot(TILDE, UnaryPrefix, UnaryPrefixPrecedence)
  LogicalNot(NOT_KEYWORD, UnaryPrefix, UnaryPrefixPrecedence)
  Multiply(ASTERISK, LeftAssociative, MultiplicativePrecedence)
  Divide(FORWARD_SLASH, LeftAssociative, MultiplicativePrecedence)
  Add(PLUS, LeftAssociative, AdditivePrecedence)
  Subtract(MINUS, LeftAssociative, AdditivePrecedence)
  Less(LESS, NotAssociative, RelationalPrecedence)
  AssignEqual(EQUAL, RightAssociative, AssignmentPrecedence)
  LeftArrow(LEFT_ARROW, RightAssociative, AssignmentPrecedence)

  function operatorType as operatorType = operatorType
  function symbol as symbol = symbol
  function keyword as keyword = keyword
  function precedence as precedence = precedence
  function text as string = if symbol is not null then symbol.text else keyword.text

  internal
    var operatorType as operatorType
    var symbol as symbol
    var keyword as keyword
    var precedence as precedence

    function create(symbol as symbol, operatorType as operatorType, precedence as precedence)
      me.operatorType = operatorType
      me.symbol = symbol
      me.keyword = null
      me.precedence = precedence
    end

    function create(
      keyword as keyword, operatorType as operatorType, precedence as precedence)
      me.operatorType = operatorType
      me.symbol = null
      me.keyword = keyword
      me.precedence = precedence
    end
  end
end